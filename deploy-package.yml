trigger:
  branches:
    include:
    - outsystems
pr: none

variables:
  SourcesDirectory: '$(Build.SourcesDirectory)'
  Project: 'requirejs'
  BuildConfiguration: 'Release'
  Config: '--configuration=$(BuildConfiguration)'
  CakePathLocation: '$(System.DefaultWorkingDirectory)'
  ReportDir: '$(Common.TestResultsDirectory)\coverage_report'
  TagName: 'v$(Build.BuildNumber)'
  
stages: 
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Build Job'
    timeoutInMinutes: 8
    pool:
      vmImage: 'windows-latest'
    steps:
    - script: |
        if('$(Build.SourceVersionMessage)' -contains "bump") {
          echo "##vso[task.setvariable variable=shouldDeploy;isOutput=true]true"
          echo "It's true!"
        }
      name: setOutput
      

- stage: Deploy
  dependsOn:
  - 'Build'
  displayName: 'Deploy'
  jobs:
  - deployment: Deploy
    condition: and(succeeded(), eq(dependencies.Build.outputs['Build.setOutput.shouldDeploy'], 'true'))
    displayName: 'Deploy to npm private repository and creates a git release'
    timeoutInMinutes: 8
    pool:
      vmImage: 'windows-latest'
    environment: Automatic-Release
    strategy: 
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: | 
              git fetch
              git branch
              git switch outsystems
              git pull
            displayName: Fetching assets
          - task: npmAuthenticate@0
            inputs:
              workingFile: '.npmrc'
              customEndpoint: 'NPM Authentication Token'
          #Retrieve current version
          - bash: |
              VERSION=`cat "package.json" | jq -r ".version"`
              echo "##vso[task.setvariable variable=TagName;]$VERSION"
          #Creates a Github release
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'GitHub Release'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: '$(TagName)'
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'
          #Publishes the package into the private artifact repository    
          - task: Npm@1
            inputs:
              command: 'publish'
              workingDir: '$(Pipeline.Workspace)/artifacts/'
              publishRegistry: 'useFeed'
              publishFeed: 'd8b4d1eb-aeb3-4b5b-9b43-37b4fc985e2f'